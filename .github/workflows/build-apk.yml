name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip python3-dev python3-setuptools python3-venv
        sudo apt-get install -y build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev libjpeg-dev libpng-dev zlib1g-dev
        sudo apt-get install -y ffmpeg libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev
        sudo apt-get install -y libgstreamer1.0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good

    - name: Setup Android SDK
      run: |
        # Create Android SDK directory
        mkdir -p $HOME/android-sdk
        cd $HOME/android-sdk

        # Download and extract command line tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip

        # Create proper directory structure
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true

        # Set environment variables
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/33.0.0

        # Accept licenses first
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses

        # Install SDK components
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.0" "ndk;25.2.9519653"

        # Verify installation
        ls -la $ANDROID_SDK_ROOT/build-tools/
        ls -la $ANDROID_SDK_ROOT/build-tools/33.0.0/

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install buildozer cython Pillow
        if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi

    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}

    - name: Cache Buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: ${{ runner.os }}-${{ hashFiles('buildozer.spec') }}

    - name: Create missing directories and files
      run: |
        mkdir -p app/core app/ui app/data assets/icons data bin
        touch app/__init__.py app/core/__init__.py app/ui/__init__.py app/data/__init__.py

    - name: Create assets with PIL
      run: |
        mkdir -p data
        python3 -c "
        from PIL import Image, ImageDraw

        # Create icon (48x48)
        img = Image.new('RGBA', (48, 48), (0, 120, 215, 255))
        draw = ImageDraw.Draw(img)
        draw.rectangle([8, 8, 40, 40], fill=(255, 255, 255, 255))
        img.save('data/icon.png')

        # Create presplash (512x512)
        img2 = Image.new('RGBA', (512, 512), (0, 120, 215, 255))
        draw2 = ImageDraw.Draw(img2)
        draw2.rectangle([100, 100, 412, 412], fill=(255, 255, 255, 255))
        img2.save('data/presplash.png')
        print('Assets created successfully')
        "

    - name: Create main.py
      run: |
        cat > main.py << 'EOF'
        from kivy.app import App
        from kivy.uix.boxlayout import BoxLayout
        from kivy.uix.label import Label
        from kivy.uix.button import Button

        class MainWidget(BoxLayout):
            def __init__(self, **kwargs):
                super().__init__(**kwargs)
                self.orientation = 'vertical'
                self.spacing = 10
                self.padding = 20

                title = Label(
                    text='Mobile Accounting App',
                    size_hint_y=None,
                    height=50,
                    font_size=24
                )
                self.add_widget(title)

                subtitle = Label(
                    text='Built with Python & Kivy\nVersion 0.1',
                    size_hint_y=None,
                    height=80
                )
                self.add_widget(subtitle)

                btn = Button(
                    text='Start Accounting',
                    size_hint_y=None,
                    height=50
                )
                self.add_widget(btn)

        class AccountingApp(App):
            def build(self):
                return MainWidget()

        if __name__ == '__main__':
            AccountingApp().run()
        EOF

    - name: Create buildozer.spec
      run: |
        cat > buildozer.spec << 'EOF'
        [app]
        title = Mobile Accounting
        package.name = mobileaccounting
        package.domain = com.example
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas
        version = 0.1
        requirements = python3,kivy
        presplash.filename = %(source.dir)s/data/presplash.png
        icon.filename = %(source.dir)s/data/icon.png
        orientation = portrait
        fullscreen = 0

        [buildozer]
        log_level = 2

        [app:android]
        android.permissions = INTERNET
        android.api = 33
        android.minapi = 21
        android.sdk = 33
        android.ndk = 25.2.9519653
        android.accept_sdk_license = True
        android.archs = arm64-v8a
        EOF

    - name: Set environment variables
      run: |
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
        echo "$HOME/android-sdk/build-tools/33.0.0" >> $GITHUB_PATH

    - name: Build APK
      run: |
        buildozer android debug

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: accounting-app-debug
        path: bin/*.apk
        retention-days: 30

    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: .buildozer/android/platform/build-*/logs/
        retention-days: 7
