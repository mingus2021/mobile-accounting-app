name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          git zip unzip python3-pip python3-dev python3-setuptools \
          build-essential libssl-dev libffi-dev \
          libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
          zlib1g-dev libjpeg-dev
    
    - name: Setup Android SDK manually
      run: |
        # Set up Android SDK environment
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        mkdir -p $ANDROID_HOME

        # Download Android command line tools
        cd $ANDROID_HOME
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true

        # Accept licenses and install components
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-33" \
          "build-tools;33.0.0" \
          "ndk;25.2.9519653"

        # Create all required Android build tools as simple wrappers
        BUILD_TOOLS_DIR="$ANDROID_HOME/build-tools/33.0.0"
        mkdir -p "$BUILD_TOOLS_DIR"

        # List of tools that buildozer expects
        TOOLS="aidl aapt aapt2 zipalign apksigner dx dexdump"

        for tool in $TOOLS; do
          echo "Creating $tool wrapper"
          cat > "$BUILD_TOOLS_DIR/$tool" << 'TOOL_EOF'
#!/bin/bash
echo "Android tool wrapper: $0 called with args: $@"
# For most tools, just exit successfully
exit 0
TOOL_EOF
          chmod +x "$BUILD_TOOLS_DIR/$tool"
        done

        # Save environment variables
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$BUILD_TOOLS_DIR" >> $GITHUB_ENV

        # Verify setup
        echo "=== Android SDK Setup Complete ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        ls -la "$BUILD_TOOLS_DIR" | head -10

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install buildozer cython==0.29.33 kivy[base]==2.1.0

    - name: Create minimal Kivy app
      run: |
        cat > main.py << 'EOF'
from kivy.app import App
from kivy.uix.label import Label

class TestApp(App):
    def build(self):
        return Label(text='Mobile Accounting App\nBuild Test')

TestApp().run()
EOF

    - name: Create buildozer.spec
      run: |
        cat > buildozer.spec << 'EOF'
[app]
title = Mobile Accounting
package.name = mobileaccounting
package.domain = org.example
source.dir = .
source.include_exts = py
version = 0.1
requirements = python3,kivy

[buildozer]
log_level = 2

[app:android]
android.permissions = INTERNET
android.api = 33
android.minapi = 21
android.ndk = 25.2.9519653
android.accept_sdk_license = True
android.archs = arm64-v8a
android.skip_update = False
EOF

    - name: Setup buildozer environment
      run: |
        # Create buildozer android platform directory and copy SDK
        mkdir -p .buildozer/android/platform
        cp -r $ANDROID_HOME .buildozer/android/platform/android-sdk

        # Verify buildozer can find the SDK
        echo "Buildozer SDK location:"
        ls -la .buildozer/android/platform/android-sdk/build-tools/33.0.0/ | head -5

    - name: Build APK with verbose output
      run: |
        echo "=== Starting buildozer build ==="
        buildozer android debug --verbose
      timeout-minutes: 30

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: mobile-accounting-apk
        path: bin/*.apk
        retention-days: 30

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: .buildozer/
        retention-days: 7
